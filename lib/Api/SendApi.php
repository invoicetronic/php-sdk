<?php
/**
 * SendApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Invoicetronic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Invoicetronic\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Invoicetronic\ApiException;
use Invoicetronic\Configuration;
use Invoicetronic\FormDataProcessor;
use Invoicetronic\HeaderSelector;
use Invoicetronic\ObjectSerializer;

/**
 * SendApi Class Doc Comment
 *
 * @category Class
 * @package  Invoicetronic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SendApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sendFilePost' => [
            'multipart/form-data',
        ],
        'sendGet' => [
            'application/json',
        ],
        'sendIdGet' => [
            'application/json',
        ],
        'sendJsonPost' => [
            'application/json',
        ],
        'sendPost' => [
            'application/json',
        ],
        'sendValidateFilePost' => [
            'multipart/form-data',
        ],
        'sendValidateJsonPost' => [
            'application/json',
        ],
        'sendValidatePost' => [
            'application/json',
        ],
        'sendValidateXmlPost' => [
            'application/xml',
        ],
        'sendXmlPost' => [
            'application/xml',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sendFilePost
     *
     * Add an invoice by file
     *
     * @param  \SplFileObject $file file (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendFilePost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Invoicetronic\Model\Send|\Invoicetronic\Model\ProblemHttpResult|\Invoicetronic\Model\ProblemDetails
     */
    public function sendFilePost($file, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendFilePost'][0])
    {
        list($response) = $this->sendFilePostWithHttpInfo($file, $validate, $signature, $contentType);
        return $response;
    }

    /**
     * Operation sendFilePostWithHttpInfo
     *
     * Add an invoice by file
     *
     * @param  \SplFileObject $file (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendFilePost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Invoicetronic\Model\Send|\Invoicetronic\Model\ProblemHttpResult|\Invoicetronic\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendFilePostWithHttpInfo($file, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendFilePost'][0])
    {
        $request = $this->sendFilePostRequest($file, $validate, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\Send',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Invoicetronic\Model\Send',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\Send',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sendFilePostAsync
     *
     * Add an invoice by file
     *
     * @param  \SplFileObject $file (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendFilePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendFilePostAsync($file, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendFilePost'][0])
    {
        return $this->sendFilePostAsyncWithHttpInfo($file, $validate, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendFilePostAsyncWithHttpInfo
     *
     * Add an invoice by file
     *
     * @param  \SplFileObject $file (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendFilePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendFilePostAsyncWithHttpInfo($file, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendFilePost'][0])
    {
        $returnType = '\Invoicetronic\Model\Send';
        $request = $this->sendFilePostRequest($file, $validate, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendFilePost'
     *
     * @param  \SplFileObject $file (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendFilePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendFilePostRequest($file, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendFilePost'][0])
    {

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling sendFilePost'
            );
        }




        $resourcePath = '/send/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $validate,
            'validate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);



        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'file' => $file,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendGet
     *
     * List invoices
     *
     * @param  int|null $company_id Company id (optional)
     * @param  string|null $identifier SDI identifier. (optional)
     * @param  string|null $committente Vat number or fiscal code. (optional)
     * @param  string|null $prestatore Vat number or fiscal code. (optional)
     * @param  string|null $file_name File name. (optional)
     * @param  \DateTime|null $last_update_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $last_update_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $date_sent_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $date_sent_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $document_date_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $document_date_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  string|null $document_number Document number. (optional)
     * @param  int|null $page Page number. Defaults to 1. (optional, default to 1)
     * @param  int|null $page_size Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param  string|null $sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGet'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Invoicetronic\Model\Send[]|\Invoicetronic\Model\ProblemHttpResult
     */
    public function sendGet($company_id = null, $identifier = null, $committente = null, $prestatore = null, $file_name = null, $last_update_from = null, $last_update_to = null, $date_sent_from = null, $date_sent_to = null, $document_date_from = null, $document_date_to = null, $document_number = null, $page = 1, $page_size = 100, $sort = null, string $contentType = self::contentTypes['sendGet'][0])
    {
        list($response) = $this->sendGetWithHttpInfo($company_id, $identifier, $committente, $prestatore, $file_name, $last_update_from, $last_update_to, $date_sent_from, $date_sent_to, $document_date_from, $document_date_to, $document_number, $page, $page_size, $sort, $contentType);
        return $response;
    }

    /**
     * Operation sendGetWithHttpInfo
     *
     * List invoices
     *
     * @param  int|null $company_id Company id (optional)
     * @param  string|null $identifier SDI identifier. (optional)
     * @param  string|null $committente Vat number or fiscal code. (optional)
     * @param  string|null $prestatore Vat number or fiscal code. (optional)
     * @param  string|null $file_name File name. (optional)
     * @param  \DateTime|null $last_update_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $last_update_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $date_sent_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $date_sent_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $document_date_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $document_date_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  string|null $document_number Document number. (optional)
     * @param  int|null $page Page number. Defaults to 1. (optional, default to 1)
     * @param  int|null $page_size Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param  string|null $sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGet'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Invoicetronic\Model\Send[]|\Invoicetronic\Model\ProblemHttpResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendGetWithHttpInfo($company_id = null, $identifier = null, $committente = null, $prestatore = null, $file_name = null, $last_update_from = null, $last_update_to = null, $date_sent_from = null, $date_sent_to = null, $document_date_from = null, $document_date_to = null, $document_number = null, $page = 1, $page_size = 100, $sort = null, string $contentType = self::contentTypes['sendGet'][0])
    {
        $request = $this->sendGetRequest($company_id, $identifier, $committente, $prestatore, $file_name, $last_update_from, $last_update_to, $date_sent_from, $date_sent_to, $document_date_from, $document_date_to, $document_number, $page, $page_size, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\Send[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Invoicetronic\Model\Send[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\Send[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sendGetAsync
     *
     * List invoices
     *
     * @param  int|null $company_id Company id (optional)
     * @param  string|null $identifier SDI identifier. (optional)
     * @param  string|null $committente Vat number or fiscal code. (optional)
     * @param  string|null $prestatore Vat number or fiscal code. (optional)
     * @param  string|null $file_name File name. (optional)
     * @param  \DateTime|null $last_update_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $last_update_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $date_sent_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $date_sent_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $document_date_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $document_date_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  string|null $document_number Document number. (optional)
     * @param  int|null $page Page number. Defaults to 1. (optional, default to 1)
     * @param  int|null $page_size Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param  string|null $sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendGetAsync($company_id = null, $identifier = null, $committente = null, $prestatore = null, $file_name = null, $last_update_from = null, $last_update_to = null, $date_sent_from = null, $date_sent_to = null, $document_date_from = null, $document_date_to = null, $document_number = null, $page = 1, $page_size = 100, $sort = null, string $contentType = self::contentTypes['sendGet'][0])
    {
        return $this->sendGetAsyncWithHttpInfo($company_id, $identifier, $committente, $prestatore, $file_name, $last_update_from, $last_update_to, $date_sent_from, $date_sent_to, $document_date_from, $document_date_to, $document_number, $page, $page_size, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendGetAsyncWithHttpInfo
     *
     * List invoices
     *
     * @param  int|null $company_id Company id (optional)
     * @param  string|null $identifier SDI identifier. (optional)
     * @param  string|null $committente Vat number or fiscal code. (optional)
     * @param  string|null $prestatore Vat number or fiscal code. (optional)
     * @param  string|null $file_name File name. (optional)
     * @param  \DateTime|null $last_update_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $last_update_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $date_sent_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $date_sent_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $document_date_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $document_date_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  string|null $document_number Document number. (optional)
     * @param  int|null $page Page number. Defaults to 1. (optional, default to 1)
     * @param  int|null $page_size Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param  string|null $sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendGetAsyncWithHttpInfo($company_id = null, $identifier = null, $committente = null, $prestatore = null, $file_name = null, $last_update_from = null, $last_update_to = null, $date_sent_from = null, $date_sent_to = null, $document_date_from = null, $document_date_to = null, $document_number = null, $page = 1, $page_size = 100, $sort = null, string $contentType = self::contentTypes['sendGet'][0])
    {
        $returnType = '\Invoicetronic\Model\Send[]';
        $request = $this->sendGetRequest($company_id, $identifier, $committente, $prestatore, $file_name, $last_update_from, $last_update_to, $date_sent_from, $date_sent_to, $document_date_from, $document_date_to, $document_number, $page, $page_size, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendGet'
     *
     * @param  int|null $company_id Company id (optional)
     * @param  string|null $identifier SDI identifier. (optional)
     * @param  string|null $committente Vat number or fiscal code. (optional)
     * @param  string|null $prestatore Vat number or fiscal code. (optional)
     * @param  string|null $file_name File name. (optional)
     * @param  \DateTime|null $last_update_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $last_update_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $date_sent_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $date_sent_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $document_date_from UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  \DateTime|null $document_date_to UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)
     * @param  string|null $document_number Document number. (optional)
     * @param  int|null $page Page number. Defaults to 1. (optional, default to 1)
     * @param  int|null $page_size Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)
     * @param  string|null $sort Sort by field. Prefix with &#39;-&#39; for descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendGetRequest($company_id = null, $identifier = null, $committente = null, $prestatore = null, $file_name = null, $last_update_from = null, $last_update_to = null, $date_sent_from = null, $date_sent_to = null, $document_date_from = null, $document_date_to = null, $document_number = null, $page = 1, $page_size = 100, $sort = null, string $contentType = self::contentTypes['sendGet'][0])
    {

















        $resourcePath = '/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $company_id,
            'company_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identifier,
            'identifier', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $committente,
            'committente', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prestatore,
            'prestatore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file_name,
            'file_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_update_from,
            'last_update_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_update_to,
            'last_update_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_sent_from,
            'date_sent_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_sent_to,
            'date_sent_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_date_from,
            'document_date_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_date_to,
            'document_date_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_number,
            'document_number', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendIdGet
     *
     * Get a invoice by id
     *
     * @param  int $id Item id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendIdGet'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Invoicetronic\Model\Send
     */
    public function sendIdGet($id, string $contentType = self::contentTypes['sendIdGet'][0])
    {
        list($response) = $this->sendIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation sendIdGetWithHttpInfo
     *
     * Get a invoice by id
     *
     * @param  int $id Item id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendIdGet'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Invoicetronic\Model\Send, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendIdGetWithHttpInfo($id, string $contentType = self::contentTypes['sendIdGet'][0])
    {
        $request = $this->sendIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\Send',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Invoicetronic\Model\Send',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\Send',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sendIdGetAsync
     *
     * Get a invoice by id
     *
     * @param  int $id Item id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendIdGetAsync($id, string $contentType = self::contentTypes['sendIdGet'][0])
    {
        return $this->sendIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendIdGetAsyncWithHttpInfo
     *
     * Get a invoice by id
     *
     * @param  int $id Item id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['sendIdGet'][0])
    {
        $returnType = '\Invoicetronic\Model\Send';
        $request = $this->sendIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendIdGet'
     *
     * @param  int $id Item id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendIdGetRequest($id, string $contentType = self::contentTypes['sendIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling sendIdGet'
            );
        }


        $resourcePath = '/send/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendJsonPost
     *
     * Add an invoice by json
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria fattura_ordinaria (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendJsonPost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Invoicetronic\Model\Send|\Invoicetronic\Model\ProblemHttpResult|\Invoicetronic\Model\ProblemDetails
     */
    public function sendJsonPost($fattura_ordinaria, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendJsonPost'][0])
    {
        list($response) = $this->sendJsonPostWithHttpInfo($fattura_ordinaria, $validate, $signature, $contentType);
        return $response;
    }

    /**
     * Operation sendJsonPostWithHttpInfo
     *
     * Add an invoice by json
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendJsonPost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Invoicetronic\Model\Send|\Invoicetronic\Model\ProblemHttpResult|\Invoicetronic\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendJsonPostWithHttpInfo($fattura_ordinaria, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendJsonPost'][0])
    {
        $request = $this->sendJsonPostRequest($fattura_ordinaria, $validate, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\Send',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Invoicetronic\Model\Send',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\Send',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sendJsonPostAsync
     *
     * Add an invoice by json
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendJsonPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendJsonPostAsync($fattura_ordinaria, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendJsonPost'][0])
    {
        return $this->sendJsonPostAsyncWithHttpInfo($fattura_ordinaria, $validate, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendJsonPostAsyncWithHttpInfo
     *
     * Add an invoice by json
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendJsonPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendJsonPostAsyncWithHttpInfo($fattura_ordinaria, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendJsonPost'][0])
    {
        $returnType = '\Invoicetronic\Model\Send';
        $request = $this->sendJsonPostRequest($fattura_ordinaria, $validate, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendJsonPost'
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendJsonPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendJsonPostRequest($fattura_ordinaria, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendJsonPost'][0])
    {

        // verify the required parameter 'fattura_ordinaria' is set
        if ($fattura_ordinaria === null || (is_array($fattura_ordinaria) && count($fattura_ordinaria) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fattura_ordinaria when calling sendJsonPost'
            );
        }




        $resourcePath = '/send/json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $validate,
            'validate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($fattura_ordinaria)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fattura_ordinaria));
            } else {
                $httpBody = $fattura_ordinaria;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendPost
     *
     * Add an invoice
     *
     * @param  \Invoicetronic\Model\Send $send send (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Invoicetronic\Model\Send|\Invoicetronic\Model\ProblemHttpResult|\Invoicetronic\Model\ProblemDetails
     */
    public function sendPost($send, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendPost'][0])
    {
        list($response) = $this->sendPostWithHttpInfo($send, $validate, $signature, $contentType);
        return $response;
    }

    /**
     * Operation sendPostWithHttpInfo
     *
     * Add an invoice
     *
     * @param  \Invoicetronic\Model\Send $send (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Invoicetronic\Model\Send|\Invoicetronic\Model\ProblemHttpResult|\Invoicetronic\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPostWithHttpInfo($send, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendPost'][0])
    {
        $request = $this->sendPostRequest($send, $validate, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\Send',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Invoicetronic\Model\Send',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\Send',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sendPostAsync
     *
     * Add an invoice
     *
     * @param  \Invoicetronic\Model\Send $send (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPostAsync($send, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendPost'][0])
    {
        return $this->sendPostAsyncWithHttpInfo($send, $validate, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPostAsyncWithHttpInfo
     *
     * Add an invoice
     *
     * @param  \Invoicetronic\Model\Send $send (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPostAsyncWithHttpInfo($send, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendPost'][0])
    {
        $returnType = '\Invoicetronic\Model\Send';
        $request = $this->sendPostRequest($send, $validate, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPost'
     *
     * @param  \Invoicetronic\Model\Send $send (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendPostRequest($send, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendPost'][0])
    {

        // verify the required parameter 'send' is set
        if ($send === null || (is_array($send) && count($send) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send when calling sendPost'
            );
        }




        $resourcePath = '/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $validate,
            'validate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send));
            } else {
                $httpBody = $send;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendValidateFilePost
     *
     * Validate an invoice file
     *
     * @param  \SplFileObject $file file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateFilePost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendValidateFilePost($file, string $contentType = self::contentTypes['sendValidateFilePost'][0])
    {
        $this->sendValidateFilePostWithHttpInfo($file, $contentType);
    }

    /**
     * Operation sendValidateFilePostWithHttpInfo
     *
     * Validate an invoice file
     *
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateFilePost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendValidateFilePostWithHttpInfo($file, string $contentType = self::contentTypes['sendValidateFilePost'][0])
    {
        $request = $this->sendValidateFilePostRequest($file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sendValidateFilePostAsync
     *
     * Validate an invoice file
     *
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateFilePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendValidateFilePostAsync($file, string $contentType = self::contentTypes['sendValidateFilePost'][0])
    {
        return $this->sendValidateFilePostAsyncWithHttpInfo($file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendValidateFilePostAsyncWithHttpInfo
     *
     * Validate an invoice file
     *
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateFilePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendValidateFilePostAsyncWithHttpInfo($file, string $contentType = self::contentTypes['sendValidateFilePost'][0])
    {
        $returnType = '';
        $request = $this->sendValidateFilePostRequest($file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendValidateFilePost'
     *
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateFilePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendValidateFilePostRequest($file, string $contentType = self::contentTypes['sendValidateFilePost'][0])
    {

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling sendValidateFilePost'
            );
        }


        $resourcePath = '/send/validate/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'file' => $file,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendValidateJsonPost
     *
     * Validate an invoice by json
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria fattura_ordinaria (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateJsonPost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendValidateJsonPost($fattura_ordinaria, string $contentType = self::contentTypes['sendValidateJsonPost'][0])
    {
        $this->sendValidateJsonPostWithHttpInfo($fattura_ordinaria, $contentType);
    }

    /**
     * Operation sendValidateJsonPostWithHttpInfo
     *
     * Validate an invoice by json
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateJsonPost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendValidateJsonPostWithHttpInfo($fattura_ordinaria, string $contentType = self::contentTypes['sendValidateJsonPost'][0])
    {
        $request = $this->sendValidateJsonPostRequest($fattura_ordinaria, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sendValidateJsonPostAsync
     *
     * Validate an invoice by json
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateJsonPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendValidateJsonPostAsync($fattura_ordinaria, string $contentType = self::contentTypes['sendValidateJsonPost'][0])
    {
        return $this->sendValidateJsonPostAsyncWithHttpInfo($fattura_ordinaria, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendValidateJsonPostAsyncWithHttpInfo
     *
     * Validate an invoice by json
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateJsonPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendValidateJsonPostAsyncWithHttpInfo($fattura_ordinaria, string $contentType = self::contentTypes['sendValidateJsonPost'][0])
    {
        $returnType = '';
        $request = $this->sendValidateJsonPostRequest($fattura_ordinaria, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendValidateJsonPost'
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateJsonPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendValidateJsonPostRequest($fattura_ordinaria, string $contentType = self::contentTypes['sendValidateJsonPost'][0])
    {

        // verify the required parameter 'fattura_ordinaria' is set
        if ($fattura_ordinaria === null || (is_array($fattura_ordinaria) && count($fattura_ordinaria) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fattura_ordinaria when calling sendValidateJsonPost'
            );
        }


        $resourcePath = '/send/validate/json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($fattura_ordinaria)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fattura_ordinaria));
            } else {
                $httpBody = $fattura_ordinaria;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendValidatePost
     *
     * Validate an invoice
     *
     * @param  \Invoicetronic\Model\Send $send send (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidatePost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendValidatePost($send, string $contentType = self::contentTypes['sendValidatePost'][0])
    {
        $this->sendValidatePostWithHttpInfo($send, $contentType);
    }

    /**
     * Operation sendValidatePostWithHttpInfo
     *
     * Validate an invoice
     *
     * @param  \Invoicetronic\Model\Send $send (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidatePost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendValidatePostWithHttpInfo($send, string $contentType = self::contentTypes['sendValidatePost'][0])
    {
        $request = $this->sendValidatePostRequest($send, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sendValidatePostAsync
     *
     * Validate an invoice
     *
     * @param  \Invoicetronic\Model\Send $send (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendValidatePostAsync($send, string $contentType = self::contentTypes['sendValidatePost'][0])
    {
        return $this->sendValidatePostAsyncWithHttpInfo($send, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendValidatePostAsyncWithHttpInfo
     *
     * Validate an invoice
     *
     * @param  \Invoicetronic\Model\Send $send (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendValidatePostAsyncWithHttpInfo($send, string $contentType = self::contentTypes['sendValidatePost'][0])
    {
        $returnType = '';
        $request = $this->sendValidatePostRequest($send, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendValidatePost'
     *
     * @param  \Invoicetronic\Model\Send $send (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendValidatePostRequest($send, string $contentType = self::contentTypes['sendValidatePost'][0])
    {

        // verify the required parameter 'send' is set
        if ($send === null || (is_array($send) && count($send) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send when calling sendValidatePost'
            );
        }


        $resourcePath = '/send/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send));
            } else {
                $httpBody = $send;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendValidateXmlPost
     *
     * Validate an invoice by xml
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria fattura_ordinaria (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateXmlPost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendValidateXmlPost($fattura_ordinaria, string $contentType = self::contentTypes['sendValidateXmlPost'][0])
    {
        $this->sendValidateXmlPostWithHttpInfo($fattura_ordinaria, $contentType);
    }

    /**
     * Operation sendValidateXmlPostWithHttpInfo
     *
     * Validate an invoice by xml
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateXmlPost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendValidateXmlPostWithHttpInfo($fattura_ordinaria, string $contentType = self::contentTypes['sendValidateXmlPost'][0])
    {
        $request = $this->sendValidateXmlPostRequest($fattura_ordinaria, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sendValidateXmlPostAsync
     *
     * Validate an invoice by xml
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateXmlPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendValidateXmlPostAsync($fattura_ordinaria, string $contentType = self::contentTypes['sendValidateXmlPost'][0])
    {
        return $this->sendValidateXmlPostAsyncWithHttpInfo($fattura_ordinaria, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendValidateXmlPostAsyncWithHttpInfo
     *
     * Validate an invoice by xml
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateXmlPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendValidateXmlPostAsyncWithHttpInfo($fattura_ordinaria, string $contentType = self::contentTypes['sendValidateXmlPost'][0])
    {
        $returnType = '';
        $request = $this->sendValidateXmlPostRequest($fattura_ordinaria, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendValidateXmlPost'
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendValidateXmlPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendValidateXmlPostRequest($fattura_ordinaria, string $contentType = self::contentTypes['sendValidateXmlPost'][0])
    {

        // verify the required parameter 'fattura_ordinaria' is set
        if ($fattura_ordinaria === null || (is_array($fattura_ordinaria) && count($fattura_ordinaria) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fattura_ordinaria when calling sendValidateXmlPost'
            );
        }


        $resourcePath = '/send/validate/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($fattura_ordinaria)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fattura_ordinaria));
            } else {
                $httpBody = $fattura_ordinaria;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendXmlPost
     *
     * Add an invoice by xml
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria fattura_ordinaria (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendXmlPost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Invoicetronic\Model\Send|\Invoicetronic\Model\ProblemHttpResult|\Invoicetronic\Model\ProblemDetails
     */
    public function sendXmlPost($fattura_ordinaria, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendXmlPost'][0])
    {
        list($response) = $this->sendXmlPostWithHttpInfo($fattura_ordinaria, $validate, $signature, $contentType);
        return $response;
    }

    /**
     * Operation sendXmlPostWithHttpInfo
     *
     * Add an invoice by xml
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendXmlPost'] to see the possible values for this operation
     *
     * @throws \Invoicetronic\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Invoicetronic\Model\Send|\Invoicetronic\Model\ProblemHttpResult|\Invoicetronic\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendXmlPostWithHttpInfo($fattura_ordinaria, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendXmlPost'][0])
    {
        $request = $this->sendXmlPostRequest($fattura_ordinaria, $validate, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\Send',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Invoicetronic\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Invoicetronic\Model\Send',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\Send',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemHttpResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Invoicetronic\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation sendXmlPostAsync
     *
     * Add an invoice by xml
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendXmlPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendXmlPostAsync($fattura_ordinaria, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendXmlPost'][0])
    {
        return $this->sendXmlPostAsyncWithHttpInfo($fattura_ordinaria, $validate, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendXmlPostAsyncWithHttpInfo
     *
     * Add an invoice by xml
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendXmlPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendXmlPostAsyncWithHttpInfo($fattura_ordinaria, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendXmlPost'][0])
    {
        $returnType = '\Invoicetronic\Model\Send';
        $request = $this->sendXmlPostRequest($fattura_ordinaria, $validate, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendXmlPost'
     *
     * @param  \Invoicetronic\Model\FatturaOrdinaria $fattura_ordinaria (required)
     * @param  bool|null $validate Validate the document first, and reject it on failure. (optional, default to false)
     * @param  string|null $signature Whether to digitally sign the document. (optional, default to 'Auto')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendXmlPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendXmlPostRequest($fattura_ordinaria, $validate = false, $signature = 'Auto', string $contentType = self::contentTypes['sendXmlPost'][0])
    {

        // verify the required parameter 'fattura_ordinaria' is set
        if ($fattura_ordinaria === null || (is_array($fattura_ordinaria) && count($fattura_ordinaria) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fattura_ordinaria when calling sendXmlPost'
            );
        }




        $resourcePath = '/send/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $validate,
            'validate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $signature,
            'signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($fattura_ordinaria)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fattura_ordinaria));
            } else {
                $httpBody = $fattura_ordinaria;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
