<?php
/**
 * DatiTrasmissione
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Invoicetronic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Invoicetronic\Model;

use \ArrayAccess;
use \Invoicetronic\ObjectSerializer;

/**
 * DatiTrasmissione Class Doc Comment
 *
 * @category Class
 * @package  Invoicetronic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DatiTrasmissione implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DatiTrasmissione';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_trasmittente' => '\Invoicetronic\Model\IdTrasmittente',
        'progressivo_invio' => 'string',
        'formato_trasmissione' => 'string',
        'codice_destinatario' => 'string',
        'contatti_trasmittente' => '\Invoicetronic\Model\ContattiTrasmittente',
        'pec_destinatario' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_trasmittente' => null,
        'progressivo_invio' => null,
        'formato_trasmissione' => null,
        'codice_destinatario' => null,
        'contatti_trasmittente' => null,
        'pec_destinatario' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_trasmittente' => false,
        'progressivo_invio' => true,
        'formato_trasmissione' => true,
        'codice_destinatario' => true,
        'contatti_trasmittente' => false,
        'pec_destinatario' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_trasmittente' => 'id_trasmittente',
        'progressivo_invio' => 'progressivo_invio',
        'formato_trasmissione' => 'formato_trasmissione',
        'codice_destinatario' => 'codice_destinatario',
        'contatti_trasmittente' => 'contatti_trasmittente',
        'pec_destinatario' => 'pec_destinatario'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_trasmittente' => 'setIdTrasmittente',
        'progressivo_invio' => 'setProgressivoInvio',
        'formato_trasmissione' => 'setFormatoTrasmissione',
        'codice_destinatario' => 'setCodiceDestinatario',
        'contatti_trasmittente' => 'setContattiTrasmittente',
        'pec_destinatario' => 'setPecDestinatario'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_trasmittente' => 'getIdTrasmittente',
        'progressivo_invio' => 'getProgressivoInvio',
        'formato_trasmissione' => 'getFormatoTrasmissione',
        'codice_destinatario' => 'getCodiceDestinatario',
        'contatti_trasmittente' => 'getContattiTrasmittente',
        'pec_destinatario' => 'getPecDestinatario'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id_trasmittente', $data ?? [], null);
        $this->setIfExists('progressivo_invio', $data ?? [], null);
        $this->setIfExists('formato_trasmissione', $data ?? [], null);
        $this->setIfExists('codice_destinatario', $data ?? [], null);
        $this->setIfExists('contatti_trasmittente', $data ?? [], null);
        $this->setIfExists('pec_destinatario', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_trasmittente
     *
     * @return \Invoicetronic\Model\IdTrasmittente|null
     */
    public function getIdTrasmittente()
    {
        return $this->container['id_trasmittente'];
    }

    /**
     * Sets id_trasmittente
     *
     * @param \Invoicetronic\Model\IdTrasmittente|null $id_trasmittente id_trasmittente
     *
     * @return self
     */
    public function setIdTrasmittente($id_trasmittente)
    {
        if (is_null($id_trasmittente)) {
            throw new \InvalidArgumentException('non-nullable id_trasmittente cannot be null');
        }
        $this->container['id_trasmittente'] = $id_trasmittente;

        return $this;
    }

    /**
     * Gets progressivo_invio
     *
     * @return string|null
     */
    public function getProgressivoInvio()
    {
        return $this->container['progressivo_invio'];
    }

    /**
     * Sets progressivo_invio
     *
     * @param string|null $progressivo_invio progressivo_invio
     *
     * @return self
     */
    public function setProgressivoInvio($progressivo_invio)
    {
        if (is_null($progressivo_invio)) {
            array_push($this->openAPINullablesSetToNull, 'progressivo_invio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('progressivo_invio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['progressivo_invio'] = $progressivo_invio;

        return $this;
    }

    /**
     * Gets formato_trasmissione
     *
     * @return string|null
     */
    public function getFormatoTrasmissione()
    {
        return $this->container['formato_trasmissione'];
    }

    /**
     * Sets formato_trasmissione
     *
     * @param string|null $formato_trasmissione formato_trasmissione
     *
     * @return self
     */
    public function setFormatoTrasmissione($formato_trasmissione)
    {
        if (is_null($formato_trasmissione)) {
            array_push($this->openAPINullablesSetToNull, 'formato_trasmissione');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('formato_trasmissione', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['formato_trasmissione'] = $formato_trasmissione;

        return $this;
    }

    /**
     * Gets codice_destinatario
     *
     * @return string|null
     */
    public function getCodiceDestinatario()
    {
        return $this->container['codice_destinatario'];
    }

    /**
     * Sets codice_destinatario
     *
     * @param string|null $codice_destinatario codice_destinatario
     *
     * @return self
     */
    public function setCodiceDestinatario($codice_destinatario)
    {
        if (is_null($codice_destinatario)) {
            array_push($this->openAPINullablesSetToNull, 'codice_destinatario');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codice_destinatario', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['codice_destinatario'] = $codice_destinatario;

        return $this;
    }

    /**
     * Gets contatti_trasmittente
     *
     * @return \Invoicetronic\Model\ContattiTrasmittente|null
     */
    public function getContattiTrasmittente()
    {
        return $this->container['contatti_trasmittente'];
    }

    /**
     * Sets contatti_trasmittente
     *
     * @param \Invoicetronic\Model\ContattiTrasmittente|null $contatti_trasmittente contatti_trasmittente
     *
     * @return self
     */
    public function setContattiTrasmittente($contatti_trasmittente)
    {
        if (is_null($contatti_trasmittente)) {
            throw new \InvalidArgumentException('non-nullable contatti_trasmittente cannot be null');
        }
        $this->container['contatti_trasmittente'] = $contatti_trasmittente;

        return $this;
    }

    /**
     * Gets pec_destinatario
     *
     * @return string|null
     */
    public function getPecDestinatario()
    {
        return $this->container['pec_destinatario'];
    }

    /**
     * Sets pec_destinatario
     *
     * @param string|null $pec_destinatario pec_destinatario
     *
     * @return self
     */
    public function setPecDestinatario($pec_destinatario)
    {
        if (is_null($pec_destinatario)) {
            array_push($this->openAPINullablesSetToNull, 'pec_destinatario');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pec_destinatario', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pec_destinatario'] = $pec_destinatario;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


