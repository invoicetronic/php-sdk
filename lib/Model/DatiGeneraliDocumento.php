<?php
/**
 * DatiGeneraliDocumento
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Invoicetronic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Invoicetronic\Model;

use \ArrayAccess;
use \Invoicetronic\ObjectSerializer;

/**
 * DatiGeneraliDocumento Class Doc Comment
 *
 * @category Class
 * @package  Invoicetronic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DatiGeneraliDocumento implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DatiGeneraliDocumento';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tipo_documento' => 'string',
        'divisa' => 'string',
        'data' => '\DateTime',
        'numero' => 'string',
        'dati_ritenuta' => '\Invoicetronic\Model\DatiRitenuta[]',
        'dati_bollo' => '\Invoicetronic\Model\DatiBollo',
        'dati_cassa_previdenziale' => '\Invoicetronic\Model\DatiCassaPrevidenziale[]',
        'sconto_maggiorazione' => '\Invoicetronic\Model\ScontoMaggiorazione[]',
        'importo_totale_documento' => 'float',
        'arrotondamento' => 'float',
        'causale' => 'string[]',
        'art73' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tipo_documento' => null,
        'divisa' => null,
        'data' => 'date-time',
        'numero' => null,
        'dati_ritenuta' => null,
        'dati_bollo' => null,
        'dati_cassa_previdenziale' => null,
        'sconto_maggiorazione' => null,
        'importo_totale_documento' => 'double',
        'arrotondamento' => 'double',
        'causale' => null,
        'art73' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tipo_documento' => true,
        'divisa' => true,
        'data' => false,
        'numero' => true,
        'dati_ritenuta' => true,
        'dati_bollo' => false,
        'dati_cassa_previdenziale' => true,
        'sconto_maggiorazione' => true,
        'importo_totale_documento' => true,
        'arrotondamento' => true,
        'causale' => true,
        'art73' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tipo_documento' => 'tipo_documento',
        'divisa' => 'divisa',
        'data' => 'data',
        'numero' => 'numero',
        'dati_ritenuta' => 'dati_ritenuta',
        'dati_bollo' => 'dati_bollo',
        'dati_cassa_previdenziale' => 'dati_cassa_previdenziale',
        'sconto_maggiorazione' => 'sconto_maggiorazione',
        'importo_totale_documento' => 'importo_totale_documento',
        'arrotondamento' => 'arrotondamento',
        'causale' => 'causale',
        'art73' => 'art73'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tipo_documento' => 'setTipoDocumento',
        'divisa' => 'setDivisa',
        'data' => 'setData',
        'numero' => 'setNumero',
        'dati_ritenuta' => 'setDatiRitenuta',
        'dati_bollo' => 'setDatiBollo',
        'dati_cassa_previdenziale' => 'setDatiCassaPrevidenziale',
        'sconto_maggiorazione' => 'setScontoMaggiorazione',
        'importo_totale_documento' => 'setImportoTotaleDocumento',
        'arrotondamento' => 'setArrotondamento',
        'causale' => 'setCausale',
        'art73' => 'setArt73'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tipo_documento' => 'getTipoDocumento',
        'divisa' => 'getDivisa',
        'data' => 'getData',
        'numero' => 'getNumero',
        'dati_ritenuta' => 'getDatiRitenuta',
        'dati_bollo' => 'getDatiBollo',
        'dati_cassa_previdenziale' => 'getDatiCassaPrevidenziale',
        'sconto_maggiorazione' => 'getScontoMaggiorazione',
        'importo_totale_documento' => 'getImportoTotaleDocumento',
        'arrotondamento' => 'getArrotondamento',
        'causale' => 'getCausale',
        'art73' => 'getArt73'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('tipo_documento', $data ?? [], null);
        $this->setIfExists('divisa', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('numero', $data ?? [], null);
        $this->setIfExists('dati_ritenuta', $data ?? [], null);
        $this->setIfExists('dati_bollo', $data ?? [], null);
        $this->setIfExists('dati_cassa_previdenziale', $data ?? [], null);
        $this->setIfExists('sconto_maggiorazione', $data ?? [], null);
        $this->setIfExists('importo_totale_documento', $data ?? [], null);
        $this->setIfExists('arrotondamento', $data ?? [], null);
        $this->setIfExists('causale', $data ?? [], null);
        $this->setIfExists('art73', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tipo_documento
     *
     * @return string|null
     */
    public function getTipoDocumento()
    {
        return $this->container['tipo_documento'];
    }

    /**
     * Sets tipo_documento
     *
     * @param string|null $tipo_documento tipo_documento
     *
     * @return self
     */
    public function setTipoDocumento($tipo_documento)
    {
        if (is_null($tipo_documento)) {
            array_push($this->openAPINullablesSetToNull, 'tipo_documento');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tipo_documento', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tipo_documento'] = $tipo_documento;

        return $this;
    }

    /**
     * Gets divisa
     *
     * @return string|null
     */
    public function getDivisa()
    {
        return $this->container['divisa'];
    }

    /**
     * Sets divisa
     *
     * @param string|null $divisa divisa
     *
     * @return self
     */
    public function setDivisa($divisa)
    {
        if (is_null($divisa)) {
            array_push($this->openAPINullablesSetToNull, 'divisa');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('divisa', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['divisa'] = $divisa;

        return $this;
    }

    /**
     * Gets data
     *
     * @return \DateTime|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param \DateTime|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets numero
     *
     * @return string|null
     */
    public function getNumero()
    {
        return $this->container['numero'];
    }

    /**
     * Sets numero
     *
     * @param string|null $numero numero
     *
     * @return self
     */
    public function setNumero($numero)
    {
        if (is_null($numero)) {
            array_push($this->openAPINullablesSetToNull, 'numero');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numero', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['numero'] = $numero;

        return $this;
    }

    /**
     * Gets dati_ritenuta
     *
     * @return \Invoicetronic\Model\DatiRitenuta[]|null
     */
    public function getDatiRitenuta()
    {
        return $this->container['dati_ritenuta'];
    }

    /**
     * Sets dati_ritenuta
     *
     * @param \Invoicetronic\Model\DatiRitenuta[]|null $dati_ritenuta dati_ritenuta
     *
     * @return self
     */
    public function setDatiRitenuta($dati_ritenuta)
    {
        if (is_null($dati_ritenuta)) {
            array_push($this->openAPINullablesSetToNull, 'dati_ritenuta');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dati_ritenuta', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dati_ritenuta'] = $dati_ritenuta;

        return $this;
    }

    /**
     * Gets dati_bollo
     *
     * @return \Invoicetronic\Model\DatiBollo|null
     */
    public function getDatiBollo()
    {
        return $this->container['dati_bollo'];
    }

    /**
     * Sets dati_bollo
     *
     * @param \Invoicetronic\Model\DatiBollo|null $dati_bollo dati_bollo
     *
     * @return self
     */
    public function setDatiBollo($dati_bollo)
    {
        if (is_null($dati_bollo)) {
            throw new \InvalidArgumentException('non-nullable dati_bollo cannot be null');
        }
        $this->container['dati_bollo'] = $dati_bollo;

        return $this;
    }

    /**
     * Gets dati_cassa_previdenziale
     *
     * @return \Invoicetronic\Model\DatiCassaPrevidenziale[]|null
     */
    public function getDatiCassaPrevidenziale()
    {
        return $this->container['dati_cassa_previdenziale'];
    }

    /**
     * Sets dati_cassa_previdenziale
     *
     * @param \Invoicetronic\Model\DatiCassaPrevidenziale[]|null $dati_cassa_previdenziale dati_cassa_previdenziale
     *
     * @return self
     */
    public function setDatiCassaPrevidenziale($dati_cassa_previdenziale)
    {
        if (is_null($dati_cassa_previdenziale)) {
            array_push($this->openAPINullablesSetToNull, 'dati_cassa_previdenziale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dati_cassa_previdenziale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dati_cassa_previdenziale'] = $dati_cassa_previdenziale;

        return $this;
    }

    /**
     * Gets sconto_maggiorazione
     *
     * @return \Invoicetronic\Model\ScontoMaggiorazione[]|null
     */
    public function getScontoMaggiorazione()
    {
        return $this->container['sconto_maggiorazione'];
    }

    /**
     * Sets sconto_maggiorazione
     *
     * @param \Invoicetronic\Model\ScontoMaggiorazione[]|null $sconto_maggiorazione sconto_maggiorazione
     *
     * @return self
     */
    public function setScontoMaggiorazione($sconto_maggiorazione)
    {
        if (is_null($sconto_maggiorazione)) {
            array_push($this->openAPINullablesSetToNull, 'sconto_maggiorazione');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sconto_maggiorazione', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sconto_maggiorazione'] = $sconto_maggiorazione;

        return $this;
    }

    /**
     * Gets importo_totale_documento
     *
     * @return float|null
     */
    public function getImportoTotaleDocumento()
    {
        return $this->container['importo_totale_documento'];
    }

    /**
     * Sets importo_totale_documento
     *
     * @param float|null $importo_totale_documento importo_totale_documento
     *
     * @return self
     */
    public function setImportoTotaleDocumento($importo_totale_documento)
    {
        if (is_null($importo_totale_documento)) {
            array_push($this->openAPINullablesSetToNull, 'importo_totale_documento');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('importo_totale_documento', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['importo_totale_documento'] = $importo_totale_documento;

        return $this;
    }

    /**
     * Gets arrotondamento
     *
     * @return float|null
     */
    public function getArrotondamento()
    {
        return $this->container['arrotondamento'];
    }

    /**
     * Sets arrotondamento
     *
     * @param float|null $arrotondamento arrotondamento
     *
     * @return self
     */
    public function setArrotondamento($arrotondamento)
    {
        if (is_null($arrotondamento)) {
            array_push($this->openAPINullablesSetToNull, 'arrotondamento');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('arrotondamento', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['arrotondamento'] = $arrotondamento;

        return $this;
    }

    /**
     * Gets causale
     *
     * @return string[]|null
     */
    public function getCausale()
    {
        return $this->container['causale'];
    }

    /**
     * Sets causale
     *
     * @param string[]|null $causale causale
     *
     * @return self
     */
    public function setCausale($causale)
    {
        if (is_null($causale)) {
            array_push($this->openAPINullablesSetToNull, 'causale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('causale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['causale'] = $causale;

        return $this;
    }

    /**
     * Gets art73
     *
     * @return string|null
     */
    public function getArt73()
    {
        return $this->container['art73'];
    }

    /**
     * Sets art73
     *
     * @param string|null $art73 art73
     *
     * @return self
     */
    public function setArt73($art73)
    {
        if (is_null($art73)) {
            array_push($this->openAPINullablesSetToNull, 'art73');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('art73', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['art73'] = $art73;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


