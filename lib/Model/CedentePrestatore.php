<?php
/**
 * CedentePrestatore
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Invoicetronic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Invoicetronic\Model;

use \ArrayAccess;
use \Invoicetronic\ObjectSerializer;

/**
 * CedentePrestatore Class Doc Comment
 *
 * @category Class
 * @package  Invoicetronic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CedentePrestatore implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CedentePrestatore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dati_anagrafici' => '\Invoicetronic\Model\DatiAnagraficiCedentePrestatore',
        'sede' => '\Invoicetronic\Model\SedeCedentePrestatore',
        'stabile_organizzazione' => '\Invoicetronic\Model\StabileOrganizzazione',
        'iscrizione_rea' => '\Invoicetronic\Model\IscrizioneREA',
        'contatti' => '\Invoicetronic\Model\Contatti',
        'riferimento_amministrazione' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dati_anagrafici' => null,
        'sede' => null,
        'stabile_organizzazione' => null,
        'iscrizione_rea' => null,
        'contatti' => null,
        'riferimento_amministrazione' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dati_anagrafici' => false,
        'sede' => false,
        'stabile_organizzazione' => false,
        'iscrizione_rea' => false,
        'contatti' => false,
        'riferimento_amministrazione' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dati_anagrafici' => 'dati_anagrafici',
        'sede' => 'sede',
        'stabile_organizzazione' => 'stabile_organizzazione',
        'iscrizione_rea' => 'iscrizione_rea',
        'contatti' => 'contatti',
        'riferimento_amministrazione' => 'riferimento_amministrazione'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dati_anagrafici' => 'setDatiAnagrafici',
        'sede' => 'setSede',
        'stabile_organizzazione' => 'setStabileOrganizzazione',
        'iscrizione_rea' => 'setIscrizioneRea',
        'contatti' => 'setContatti',
        'riferimento_amministrazione' => 'setRiferimentoAmministrazione'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dati_anagrafici' => 'getDatiAnagrafici',
        'sede' => 'getSede',
        'stabile_organizzazione' => 'getStabileOrganizzazione',
        'iscrizione_rea' => 'getIscrizioneRea',
        'contatti' => 'getContatti',
        'riferimento_amministrazione' => 'getRiferimentoAmministrazione'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('dati_anagrafici', $data ?? [], null);
        $this->setIfExists('sede', $data ?? [], null);
        $this->setIfExists('stabile_organizzazione', $data ?? [], null);
        $this->setIfExists('iscrizione_rea', $data ?? [], null);
        $this->setIfExists('contatti', $data ?? [], null);
        $this->setIfExists('riferimento_amministrazione', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dati_anagrafici
     *
     * @return \Invoicetronic\Model\DatiAnagraficiCedentePrestatore|null
     */
    public function getDatiAnagrafici()
    {
        return $this->container['dati_anagrafici'];
    }

    /**
     * Sets dati_anagrafici
     *
     * @param \Invoicetronic\Model\DatiAnagraficiCedentePrestatore|null $dati_anagrafici dati_anagrafici
     *
     * @return self
     */
    public function setDatiAnagrafici($dati_anagrafici)
    {
        if (is_null($dati_anagrafici)) {
            throw new \InvalidArgumentException('non-nullable dati_anagrafici cannot be null');
        }
        $this->container['dati_anagrafici'] = $dati_anagrafici;

        return $this;
    }

    /**
     * Gets sede
     *
     * @return \Invoicetronic\Model\SedeCedentePrestatore|null
     */
    public function getSede()
    {
        return $this->container['sede'];
    }

    /**
     * Sets sede
     *
     * @param \Invoicetronic\Model\SedeCedentePrestatore|null $sede sede
     *
     * @return self
     */
    public function setSede($sede)
    {
        if (is_null($sede)) {
            throw new \InvalidArgumentException('non-nullable sede cannot be null');
        }
        $this->container['sede'] = $sede;

        return $this;
    }

    /**
     * Gets stabile_organizzazione
     *
     * @return \Invoicetronic\Model\StabileOrganizzazione|null
     */
    public function getStabileOrganizzazione()
    {
        return $this->container['stabile_organizzazione'];
    }

    /**
     * Sets stabile_organizzazione
     *
     * @param \Invoicetronic\Model\StabileOrganizzazione|null $stabile_organizzazione stabile_organizzazione
     *
     * @return self
     */
    public function setStabileOrganizzazione($stabile_organizzazione)
    {
        if (is_null($stabile_organizzazione)) {
            throw new \InvalidArgumentException('non-nullable stabile_organizzazione cannot be null');
        }
        $this->container['stabile_organizzazione'] = $stabile_organizzazione;

        return $this;
    }

    /**
     * Gets iscrizione_rea
     *
     * @return \Invoicetronic\Model\IscrizioneREA|null
     */
    public function getIscrizioneRea()
    {
        return $this->container['iscrizione_rea'];
    }

    /**
     * Sets iscrizione_rea
     *
     * @param \Invoicetronic\Model\IscrizioneREA|null $iscrizione_rea iscrizione_rea
     *
     * @return self
     */
    public function setIscrizioneRea($iscrizione_rea)
    {
        if (is_null($iscrizione_rea)) {
            throw new \InvalidArgumentException('non-nullable iscrizione_rea cannot be null');
        }
        $this->container['iscrizione_rea'] = $iscrizione_rea;

        return $this;
    }

    /**
     * Gets contatti
     *
     * @return \Invoicetronic\Model\Contatti|null
     */
    public function getContatti()
    {
        return $this->container['contatti'];
    }

    /**
     * Sets contatti
     *
     * @param \Invoicetronic\Model\Contatti|null $contatti contatti
     *
     * @return self
     */
    public function setContatti($contatti)
    {
        if (is_null($contatti)) {
            throw new \InvalidArgumentException('non-nullable contatti cannot be null');
        }
        $this->container['contatti'] = $contatti;

        return $this;
    }

    /**
     * Gets riferimento_amministrazione
     *
     * @return string|null
     */
    public function getRiferimentoAmministrazione()
    {
        return $this->container['riferimento_amministrazione'];
    }

    /**
     * Sets riferimento_amministrazione
     *
     * @param string|null $riferimento_amministrazione riferimento_amministrazione
     *
     * @return self
     */
    public function setRiferimentoAmministrazione($riferimento_amministrazione)
    {
        if (is_null($riferimento_amministrazione)) {
            array_push($this->openAPINullablesSetToNull, 'riferimento_amministrazione');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('riferimento_amministrazione', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['riferimento_amministrazione'] = $riferimento_amministrazione;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


