<?php
/**
 * DettaglioLinee
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Invoicetronic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Invoicetronic\Model;

use \ArrayAccess;
use \Invoicetronic\ObjectSerializer;

/**
 * DettaglioLinee Class Doc Comment
 *
 * @category Class
 * @package  Invoicetronic
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DettaglioLinee implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DettaglioLinee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'numero_linea' => 'int',
        'tipo_cessione_prestazione' => 'string',
        'codice_articolo' => '\Invoicetronic\Model\CodiceArticolo[]',
        'descrizione' => 'string',
        'quantita' => 'float',
        'unita_misura' => 'string',
        'data_inizio_periodo' => '\DateTime',
        'data_fine_periodo' => '\DateTime',
        'prezzo_unitario' => 'float',
        'sconto_maggiorazione' => '\Invoicetronic\Model\ScontoMaggiorazione[]',
        'prezzo_totale' => 'float',
        'aliquota_iva' => 'float',
        'ritenuta' => 'string',
        'natura' => 'string',
        'riferimento_amministrazione' => 'string',
        'altri_dati_gestionali' => '\Invoicetronic\Model\AltriDatiGestionali[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'numero_linea' => 'int32',
        'tipo_cessione_prestazione' => null,
        'codice_articolo' => null,
        'descrizione' => null,
        'quantita' => 'double',
        'unita_misura' => null,
        'data_inizio_periodo' => 'date-time',
        'data_fine_periodo' => 'date-time',
        'prezzo_unitario' => 'double',
        'sconto_maggiorazione' => null,
        'prezzo_totale' => 'double',
        'aliquota_iva' => 'double',
        'ritenuta' => null,
        'natura' => null,
        'riferimento_amministrazione' => null,
        'altri_dati_gestionali' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'numero_linea' => false,
        'tipo_cessione_prestazione' => true,
        'codice_articolo' => true,
        'descrizione' => true,
        'quantita' => true,
        'unita_misura' => true,
        'data_inizio_periodo' => true,
        'data_fine_periodo' => true,
        'prezzo_unitario' => false,
        'sconto_maggiorazione' => true,
        'prezzo_totale' => false,
        'aliquota_iva' => false,
        'ritenuta' => true,
        'natura' => true,
        'riferimento_amministrazione' => true,
        'altri_dati_gestionali' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numero_linea' => 'numero_linea',
        'tipo_cessione_prestazione' => 'tipo_cessione_prestazione',
        'codice_articolo' => 'codice_articolo',
        'descrizione' => 'descrizione',
        'quantita' => 'quantita',
        'unita_misura' => 'unita_misura',
        'data_inizio_periodo' => 'data_inizio_periodo',
        'data_fine_periodo' => 'data_fine_periodo',
        'prezzo_unitario' => 'prezzo_unitario',
        'sconto_maggiorazione' => 'sconto_maggiorazione',
        'prezzo_totale' => 'prezzo_totale',
        'aliquota_iva' => 'aliquota_iva',
        'ritenuta' => 'ritenuta',
        'natura' => 'natura',
        'riferimento_amministrazione' => 'riferimento_amministrazione',
        'altri_dati_gestionali' => 'altri_dati_gestionali'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numero_linea' => 'setNumeroLinea',
        'tipo_cessione_prestazione' => 'setTipoCessionePrestazione',
        'codice_articolo' => 'setCodiceArticolo',
        'descrizione' => 'setDescrizione',
        'quantita' => 'setQuantita',
        'unita_misura' => 'setUnitaMisura',
        'data_inizio_periodo' => 'setDataInizioPeriodo',
        'data_fine_periodo' => 'setDataFinePeriodo',
        'prezzo_unitario' => 'setPrezzoUnitario',
        'sconto_maggiorazione' => 'setScontoMaggiorazione',
        'prezzo_totale' => 'setPrezzoTotale',
        'aliquota_iva' => 'setAliquotaIva',
        'ritenuta' => 'setRitenuta',
        'natura' => 'setNatura',
        'riferimento_amministrazione' => 'setRiferimentoAmministrazione',
        'altri_dati_gestionali' => 'setAltriDatiGestionali'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numero_linea' => 'getNumeroLinea',
        'tipo_cessione_prestazione' => 'getTipoCessionePrestazione',
        'codice_articolo' => 'getCodiceArticolo',
        'descrizione' => 'getDescrizione',
        'quantita' => 'getQuantita',
        'unita_misura' => 'getUnitaMisura',
        'data_inizio_periodo' => 'getDataInizioPeriodo',
        'data_fine_periodo' => 'getDataFinePeriodo',
        'prezzo_unitario' => 'getPrezzoUnitario',
        'sconto_maggiorazione' => 'getScontoMaggiorazione',
        'prezzo_totale' => 'getPrezzoTotale',
        'aliquota_iva' => 'getAliquotaIva',
        'ritenuta' => 'getRitenuta',
        'natura' => 'getNatura',
        'riferimento_amministrazione' => 'getRiferimentoAmministrazione',
        'altri_dati_gestionali' => 'getAltriDatiGestionali'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('numero_linea', $data ?? [], null);
        $this->setIfExists('tipo_cessione_prestazione', $data ?? [], null);
        $this->setIfExists('codice_articolo', $data ?? [], null);
        $this->setIfExists('descrizione', $data ?? [], null);
        $this->setIfExists('quantita', $data ?? [], null);
        $this->setIfExists('unita_misura', $data ?? [], null);
        $this->setIfExists('data_inizio_periodo', $data ?? [], null);
        $this->setIfExists('data_fine_periodo', $data ?? [], null);
        $this->setIfExists('prezzo_unitario', $data ?? [], null);
        $this->setIfExists('sconto_maggiorazione', $data ?? [], null);
        $this->setIfExists('prezzo_totale', $data ?? [], null);
        $this->setIfExists('aliquota_iva', $data ?? [], null);
        $this->setIfExists('ritenuta', $data ?? [], null);
        $this->setIfExists('natura', $data ?? [], null);
        $this->setIfExists('riferimento_amministrazione', $data ?? [], null);
        $this->setIfExists('altri_dati_gestionali', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets numero_linea
     *
     * @return int|null
     */
    public function getNumeroLinea()
    {
        return $this->container['numero_linea'];
    }

    /**
     * Sets numero_linea
     *
     * @param int|null $numero_linea numero_linea
     *
     * @return self
     */
    public function setNumeroLinea($numero_linea)
    {
        if (is_null($numero_linea)) {
            throw new \InvalidArgumentException('non-nullable numero_linea cannot be null');
        }
        $this->container['numero_linea'] = $numero_linea;

        return $this;
    }

    /**
     * Gets tipo_cessione_prestazione
     *
     * @return string|null
     */
    public function getTipoCessionePrestazione()
    {
        return $this->container['tipo_cessione_prestazione'];
    }

    /**
     * Sets tipo_cessione_prestazione
     *
     * @param string|null $tipo_cessione_prestazione tipo_cessione_prestazione
     *
     * @return self
     */
    public function setTipoCessionePrestazione($tipo_cessione_prestazione)
    {
        if (is_null($tipo_cessione_prestazione)) {
            array_push($this->openAPINullablesSetToNull, 'tipo_cessione_prestazione');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tipo_cessione_prestazione', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tipo_cessione_prestazione'] = $tipo_cessione_prestazione;

        return $this;
    }

    /**
     * Gets codice_articolo
     *
     * @return \Invoicetronic\Model\CodiceArticolo[]|null
     */
    public function getCodiceArticolo()
    {
        return $this->container['codice_articolo'];
    }

    /**
     * Sets codice_articolo
     *
     * @param \Invoicetronic\Model\CodiceArticolo[]|null $codice_articolo codice_articolo
     *
     * @return self
     */
    public function setCodiceArticolo($codice_articolo)
    {
        if (is_null($codice_articolo)) {
            array_push($this->openAPINullablesSetToNull, 'codice_articolo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codice_articolo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['codice_articolo'] = $codice_articolo;

        return $this;
    }

    /**
     * Gets descrizione
     *
     * @return string|null
     */
    public function getDescrizione()
    {
        return $this->container['descrizione'];
    }

    /**
     * Sets descrizione
     *
     * @param string|null $descrizione descrizione
     *
     * @return self
     */
    public function setDescrizione($descrizione)
    {
        if (is_null($descrizione)) {
            array_push($this->openAPINullablesSetToNull, 'descrizione');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('descrizione', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['descrizione'] = $descrizione;

        return $this;
    }

    /**
     * Gets quantita
     *
     * @return float|null
     */
    public function getQuantita()
    {
        return $this->container['quantita'];
    }

    /**
     * Sets quantita
     *
     * @param float|null $quantita quantita
     *
     * @return self
     */
    public function setQuantita($quantita)
    {
        if (is_null($quantita)) {
            array_push($this->openAPINullablesSetToNull, 'quantita');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantita', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantita'] = $quantita;

        return $this;
    }

    /**
     * Gets unita_misura
     *
     * @return string|null
     */
    public function getUnitaMisura()
    {
        return $this->container['unita_misura'];
    }

    /**
     * Sets unita_misura
     *
     * @param string|null $unita_misura unita_misura
     *
     * @return self
     */
    public function setUnitaMisura($unita_misura)
    {
        if (is_null($unita_misura)) {
            array_push($this->openAPINullablesSetToNull, 'unita_misura');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unita_misura', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unita_misura'] = $unita_misura;

        return $this;
    }

    /**
     * Gets data_inizio_periodo
     *
     * @return \DateTime|null
     */
    public function getDataInizioPeriodo()
    {
        return $this->container['data_inizio_periodo'];
    }

    /**
     * Sets data_inizio_periodo
     *
     * @param \DateTime|null $data_inizio_periodo data_inizio_periodo
     *
     * @return self
     */
    public function setDataInizioPeriodo($data_inizio_periodo)
    {
        if (is_null($data_inizio_periodo)) {
            array_push($this->openAPINullablesSetToNull, 'data_inizio_periodo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_inizio_periodo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_inizio_periodo'] = $data_inizio_periodo;

        return $this;
    }

    /**
     * Gets data_fine_periodo
     *
     * @return \DateTime|null
     */
    public function getDataFinePeriodo()
    {
        return $this->container['data_fine_periodo'];
    }

    /**
     * Sets data_fine_periodo
     *
     * @param \DateTime|null $data_fine_periodo data_fine_periodo
     *
     * @return self
     */
    public function setDataFinePeriodo($data_fine_periodo)
    {
        if (is_null($data_fine_periodo)) {
            array_push($this->openAPINullablesSetToNull, 'data_fine_periodo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_fine_periodo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_fine_periodo'] = $data_fine_periodo;

        return $this;
    }

    /**
     * Gets prezzo_unitario
     *
     * @return float|null
     */
    public function getPrezzoUnitario()
    {
        return $this->container['prezzo_unitario'];
    }

    /**
     * Sets prezzo_unitario
     *
     * @param float|null $prezzo_unitario prezzo_unitario
     *
     * @return self
     */
    public function setPrezzoUnitario($prezzo_unitario)
    {
        if (is_null($prezzo_unitario)) {
            throw new \InvalidArgumentException('non-nullable prezzo_unitario cannot be null');
        }
        $this->container['prezzo_unitario'] = $prezzo_unitario;

        return $this;
    }

    /**
     * Gets sconto_maggiorazione
     *
     * @return \Invoicetronic\Model\ScontoMaggiorazione[]|null
     */
    public function getScontoMaggiorazione()
    {
        return $this->container['sconto_maggiorazione'];
    }

    /**
     * Sets sconto_maggiorazione
     *
     * @param \Invoicetronic\Model\ScontoMaggiorazione[]|null $sconto_maggiorazione sconto_maggiorazione
     *
     * @return self
     */
    public function setScontoMaggiorazione($sconto_maggiorazione)
    {
        if (is_null($sconto_maggiorazione)) {
            array_push($this->openAPINullablesSetToNull, 'sconto_maggiorazione');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sconto_maggiorazione', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sconto_maggiorazione'] = $sconto_maggiorazione;

        return $this;
    }

    /**
     * Gets prezzo_totale
     *
     * @return float|null
     */
    public function getPrezzoTotale()
    {
        return $this->container['prezzo_totale'];
    }

    /**
     * Sets prezzo_totale
     *
     * @param float|null $prezzo_totale prezzo_totale
     *
     * @return self
     */
    public function setPrezzoTotale($prezzo_totale)
    {
        if (is_null($prezzo_totale)) {
            throw new \InvalidArgumentException('non-nullable prezzo_totale cannot be null');
        }
        $this->container['prezzo_totale'] = $prezzo_totale;

        return $this;
    }

    /**
     * Gets aliquota_iva
     *
     * @return float|null
     */
    public function getAliquotaIva()
    {
        return $this->container['aliquota_iva'];
    }

    /**
     * Sets aliquota_iva
     *
     * @param float|null $aliquota_iva aliquota_iva
     *
     * @return self
     */
    public function setAliquotaIva($aliquota_iva)
    {
        if (is_null($aliquota_iva)) {
            throw new \InvalidArgumentException('non-nullable aliquota_iva cannot be null');
        }
        $this->container['aliquota_iva'] = $aliquota_iva;

        return $this;
    }

    /**
     * Gets ritenuta
     *
     * @return string|null
     */
    public function getRitenuta()
    {
        return $this->container['ritenuta'];
    }

    /**
     * Sets ritenuta
     *
     * @param string|null $ritenuta ritenuta
     *
     * @return self
     */
    public function setRitenuta($ritenuta)
    {
        if (is_null($ritenuta)) {
            array_push($this->openAPINullablesSetToNull, 'ritenuta');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ritenuta', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ritenuta'] = $ritenuta;

        return $this;
    }

    /**
     * Gets natura
     *
     * @return string|null
     */
    public function getNatura()
    {
        return $this->container['natura'];
    }

    /**
     * Sets natura
     *
     * @param string|null $natura natura
     *
     * @return self
     */
    public function setNatura($natura)
    {
        if (is_null($natura)) {
            array_push($this->openAPINullablesSetToNull, 'natura');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('natura', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['natura'] = $natura;

        return $this;
    }

    /**
     * Gets riferimento_amministrazione
     *
     * @return string|null
     */
    public function getRiferimentoAmministrazione()
    {
        return $this->container['riferimento_amministrazione'];
    }

    /**
     * Sets riferimento_amministrazione
     *
     * @param string|null $riferimento_amministrazione riferimento_amministrazione
     *
     * @return self
     */
    public function setRiferimentoAmministrazione($riferimento_amministrazione)
    {
        if (is_null($riferimento_amministrazione)) {
            array_push($this->openAPINullablesSetToNull, 'riferimento_amministrazione');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('riferimento_amministrazione', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['riferimento_amministrazione'] = $riferimento_amministrazione;

        return $this;
    }

    /**
     * Gets altri_dati_gestionali
     *
     * @return \Invoicetronic\Model\AltriDatiGestionali[]|null
     */
    public function getAltriDatiGestionali()
    {
        return $this->container['altri_dati_gestionali'];
    }

    /**
     * Sets altri_dati_gestionali
     *
     * @param \Invoicetronic\Model\AltriDatiGestionali[]|null $altri_dati_gestionali altri_dati_gestionali
     *
     * @return self
     */
    public function setAltriDatiGestionali($altri_dati_gestionali)
    {
        if (is_null($altri_dati_gestionali)) {
            array_push($this->openAPINullablesSetToNull, 'altri_dati_gestionali');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('altri_dati_gestionali', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['altri_dati_gestionali'] = $altri_dati_gestionali;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


